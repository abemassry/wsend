#!/bin/bash
# Copyright 2013 Abraham Massry
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#

curl_installed=$(curl --version)
protocol='https'
site='wsend.net'
host=$protocol'://'$site
freeSpaceK=$(df -k $HOME | tail -n 1 | awk '{print $4}')
clientOS=$(uname)
wsend_base=$HOME/.wsend

echoerr() { 
  echo "$@" 1>&2; 
}

bashInstall () {
#not sure that put alias in both bash_profile and bashrc is a good idea.
  if [[ ! -e "$HOME/.bashrc" || ! $(grep "alias wsend=" $HOME/.bashrc) ]]; then
      echo "alias wsend='$wsend_base/wsend'" >> $HOME/.bashrc
      echo "alias wsend='$wsend_base/wsend'" >> $HOME/.bash_profile
  fi
}
cshInstall () {
  if [[ ! -e "$HOME/.cshrc" || ! $(grep  "alias wsend=" $HOME/.cshrc) ]]
  then
    echo "alias wsend '$wsend_base/wsend'" >> $HOME/.cshrc
  fi
}

kshInstall () {
  if [[ ! -e "$HOME/.kshrc"  || ! $(grep "alias wsend=" $HOME/.kshrc) ]]; then
      echo "alias wsend='$wsend_base/wsend'" >> $HOME/.kshrc
  fi
}

zshInstall () {
  if [[ ! -e "$HOME/.zshrc" || ! $(grep "alias wsend=" $HOME/.zshrc) ]]; then
      echo "alias -g wsend='$wsend_base/wsend'" >> $HOME/.zshrc
  fi
}


registerInfoMessage () {
  echoerr -e "\033[01;36m"
  echoerr "info:    "
  echoerr "info:    It appears you aren't registered"
  echoerr "info:    Registration is free and comes with 2GB of storage space"
  echoerr "info:    Plus get 1G of space for every friend you refer"
  echoerr "info:    "
  echoerr "info:    Sign up now with: wsend --register"
  echoerr "info:    "
  echoerr "info:    unregistered accounts are limited to 200MB"
  echoerr "info:    your unregistered transfer will now continue"
  echoerr "info:    "
  echoerr -e "\033[00m"
}

freeInfoMessage () {
  echoerr -e "\033[01;36m"
  echoerr "info:    "
  echoerr "info:    free accounts are limited to 2GB files"
  echoerr "info:    for more space refer friends with: "
  echoerr "info:    "
  echoerr "info:    wsend --refer friend@example.com"
  echoerr "info:    "
  echoerr "info:    or purchase space at: "
  echoerr "info:    https://wsend.net"
  echoerr "info:    and get up to 10GB files"
  echoerr "info:    "
  echoerr "info:    your free transfer will now continue"
  echoerr "info:    "
  echoerr -e "\033[00m"
}

unregisteredSignUp () {
  echoerr -e "\033[01;36m"
  echoerr "info:    "
  echoerr "info:    creating unregistered account"
  echoerr "info:    Registration is free and comes with 2GB of storage space"
  echoerr "info:    Plus get 1G of space for every friend you refer"
  echoerr "info:    "
  echoerr "info:    Sign up now with: wsend --register"
  echoerr "info:    "
  echoerr "info:    unregistered accounts are limited to 200MB"
  echoerr "info:    your unregistered transfer will now continue"
  echoerr "info:    "
  echoerr -e "\033[00m"
  unregCurlReturnVal=$(curl -s -F "start=1" $host/createunreg)
  echo $unregCurlReturnVal > $wsend_base/.id
  id=$unregCurlReturnVal
}

notEnoughSpaceErr () {
  echoerr -e "\033[01;31m"
  echoerr "error:   "
  echoerr "error:   not enough space in your account for this transfer"
  echoerr "info:    "
  echoerr "error:   you can register with: wsend --register,"
  echoerr "info:    "
  echoerr "error:   send referrals with wsend --refer friend@example.com, or"
  echoerr "error:   upgrade to a paid account at https://wsend.net"
  echoerr "error:   "
  echoerr -e "\033[00m"
}

filesizeTooLarge () {
  echoerr -e "\033[01;31m"
  echoerr "error:   "
  echoerr "error:   this file is too large for your account"
  echoerr "error:   you can register with: wsend --register"
  echoerr "error:   for 2GB files, or"
  echoerr "error:   upgrade to a paid account at https://wsend.net"
  echoerr "error:   for 10GB files"
  echoerr "error:   "
  echoerr -e "\033[00m"
}

register() {
  echoerr -e "\033[01;36m"
  echoerr "info:    enter email and password to register"
  echoerr -e "\033[00m"
  read -p "email: " entered_email
  stty -echo
  read -p "Password: " passw; echo
  stty echo
  uidFromFile=$(cat $wsend_base/.id)
  registrationMessage=$(curl -s -F "uid=$uidFromFile" -F "email=$entered_email" -F "password=$passw" $host/register_cli)
  echoerr -e "\033[01;36m"
  echoerr "info:    message from server:"
  echoerr "info:    $registrationMessage"
  echoerr -e "\033[00m"
}

login() {
  echoerr -e "\033[01;36m"
  echoerr "info:    enter email and password to login"
  echoerr -e "\033[00m"
  read -p "email: " entered_email
  stty -echo
  read -p "Password: " passw; echo
  stty echo
  loggedInID=$(curl -s -F "email=$entered_email" -F "password=$passw" $host/login_cli)

  #seem to be always a false test. As you return an id or error string, condition was always true
  if [[ "$loggedInID" != "wrong username or password" ]]; then
    echo $loggedInID > $wsend_base/.id
    echoerr -e "\033[01;36m"
    echoerr "info:    logged in sucessfully"
    echoerr -e "\033[00m"
  else
    echoerr -e "\033[01;31m"
    echoerr "error:   incorrect email password combo"
    echoerr -e "\033[00m"
  fi
}


getAccountType() { 
  user_type=$(curl -s -F "uid=$id" $host/usertype)
}

getAccountSpace() {
  accountSizeAvailable=$(curl -s -F "uid=$id" -F "size=$fileToSendSize" $host/userspaceavailable)
  accountSize=$(curl -s -F "uid=$id" $host/userspace)
}

refer() {
  if [ $user_type != 'unregistered' ] && [ $user_type != 'unknown' ]; then
    echoerr -e "\033[01;36m"
    echoerr "info:    referring a friend"
    echoerr -ne "\e[00m"
    referEmailStatus=$(curl -s -F "email=$friendEmail" -F "id=$id" $host/refer_cli)
    if [ "$referEmailStatus" == "success" ]; then 
      echoerr -e "\033[01;36m"
      echoerr "info:    friend referred successfully"
      echoerr -e "\033[00m"
    else
      echoerr -e "\033[01;31m"
      echoerr "error:   something went wrong with the referral process";
      echoerr -e "\033[00m"
    fi
  else
    echoerr -e "\033[01;31m"
    echoerr "error:   referrals available to registered accounts";
    echoerr -e "\033[00m"
  fi
}

deleteFile() {
  getAccountType
  if [ $user_type != 'unregistered' ] && [ $user_type != 'unknown' ]; then
    deleteStatus=$(curl -s -F "link=$link" -F "uid=$id" $host/delete_cli)
    if [ "$deleteStatus" == "file deleted" ]; then 
      echoerr -e "\033[01;36m"
      echoerr "info:    file deleted"
      echoerr -e "\033[00m"
    else
      echoerr -e "\033[01;31m"
      echoerr "error:   something went wrong with the delete process";
      echoerr "error:   server: $deleteStatus";
      echoerr -e "\033[00m"
    fi
  else
    echoerr -e "\033[01;31m"
    echoerr "error:   deleting available to registered accounts";
    echoerr -e "\033[00m"
  fi
  
}

sendFile() {
  if [[ -e "$fileOrDirToSend" ]]; then
    if [ -d "$fileOrDirToSend" ]; then
      #we want to send a directory, so make a compressed archive
      fileOrDirToSend=${fileOrDirToSend%/}
      tar cfj "$fileOrDirToSend.tar.bz2" "$fileOrDirToSend"
      fileToSend="$fileOrDirToSend.tar.bz2"
    elif [ -e "$fileOrDirToSend" ]; then
      fileToSend=$fileOrDirToSend
    fi

    if [ "$clientOS" == "Darwin" ]; then
      fileToSendSize=$(stat -f %z "$fileToSend")
    else
      fileToSendSize=$(stat -c%s "$fileToSend")
    fi

    getAccountSpace
    if [ "$accountSizeAvailable" == "not enough space in your account for this transfer" ]; then
      notEnoughSpaceErr
    elif [ "$accountSizeAvailable" == "file is too big for your account size" ]; then
      filesizeTooLarge
    else
        if [[ $link ]]; then   
            #link was provided, so update target link with file
            curlReturn=$(curl -F "uid=$id" -F "link=$link" -F "filehandle=@$fileToSend" $host/update_cli)
        else
            #simply create a new one
            curlReturn=$(curl -F "uid=$id" -F "filehandle=@$fileToSend" $host/upload_cli)
        fi
        echo $curlReturn
    fi

    if [ -d "$fileOrDirToSend" ]; then
      #remove our temporary file
      rm "$fileToSend"
    fi
  elif [ "$fileSendBool" == "true" ]; then
    #want to send file, but source doesn't exist
    echoUsage="true"
  fi
}

updateFile() {
  getAccountType
  if [ $user_type != 'unregistered' ] && [ $user_type != 'unknown' ]; then
    if [ -z "${firstArg}" ] && [ -z "${secondArg}" ]; then 
      echoerr -e "\033[01;31m"
      echoerr "error:   need link and file";
      echoerr -e "\033[00m"
    else
      # we dont want the user to have to remember the order
      # of link first or file first
      # so we parse the args and determine which is which
      # we only care that one is a link and the other is a
      # file

      #previous version just match on http, prefer to match on url protocol http[s]://
      if  [[ $firstArg =~ ^https*:// ]]; then
        link=$firstArg
        fileOrDirToSend=$secondArg
      else
        link=$secondArg
        fileOrDirToSend=$firstArg
      fi

      sendFile
    fi
  else
    echoerr -e "\033[01;31m"
    echoerr "error:   only registered and paid accounts can update files";
    echoerr -e "\033[00m"
  fi
}

referLink() {
  if [ $user_type != 'unregistered' ] && [ $user_type != 'unknown' ]; then
    echoerr -e "\033[01;36m"
    echoerr "info:    getting referral link"
    echoerr " "
    echoerr -ne "\e[00m"
    referLinkUrl=$(curl -s -F "id=$id" $host/referlink_cli)
    echo $referLinkUrl
  else
    echoerr -e "\033[01;31m"
    echoerr "error:   referrals available to registered accounts";
    echoerr -e "\033[00m"
  fi
  
}

list() {
	if [ -e $wsend_base/.list ]
	then
		while read upload; do
			echo ${upload%|*} = ${upload#*|}
		done < $wsend_base/.list
	else
		echo "You have no uploads at this time"
	fi
}

downloadLastVersion() {
	wsDL=$(curl -s -o $wsend_base/wsend https://raw.github.com/abemassry/wsend/master/wsend)
	chmod +x $wsend_base/wsend
	#supporting files as well
	rmDL=$(curl -s -o $wsend_base/README.md https://raw.github.com/abemassry/wsend/master/README.md)
	cpDL=$(curl -s -o $wsend_base/COPYING https://raw.github.com/abemassry/wsend/master/COPYING)
	newLatestVersion=$(curl -s -o $wsend_base/version https://raw.github.com/abemassry/wsend/master/version)
}

if [[ ! $curl_installed ]]; then
  echoerr -e "\033[01;31m"
  echoerr "error:   curl is required but it is not installed. Aborting";
  echoerr "error:   For ubuntu please run: sudo apt-get install curl";
  echoerr -e "\033[00m"
  exit 1;
fi
# check to see if directory exists
if [ -d "$wsend_base" ]; then
  #check version
  installedVersion=$(cat $wsend_base/version)
  latestVersion=$(curl -s https://raw.github.com/abemassry/wsend/master/version)
  if [ "$installedVersion" != "$latestVersion" ]; then
    echoerr -e "\033[01;36m"
    echoerr "info:    "
    echoerr "info:    new version detected, auto updating"
    echoerr "info:    "
    echoerr -e "\033[00m"
    downloadLastVersion
  fi
else
  # if not, install
  if [ "$freeSpaceK" -gt 100 ]; then
    mkdir $wsend_base
    downloadLastVersion
  else
    echoerr "not enough free space to continue. Aborting";
    exit 1;
  fi
  #add alias to shell
  #execute alias command
  if [ $SHELL == "/bin/bash" ]; then
    bashInstall
  elif [ $SHELL == "/bin/csh" ]; then
    cshInstall
  elif [ $SHELL == "/bin/tcsh" ]; then
    cshInstall
  elif [ $SHELL == "/bin/ksh" ]; then
    kshInstall
  elif [ $SHELL == "/bin/zsh" ]; then
    zshInstall
  fi #install done
fi 
#check for installation fin
#check to see if user is registered
if [ -e "$wsend_base/.id" ]; then
  id=$(cat $wsend_base/.id)
  #ask server for account type
  user_type=$(curl -s -F "uid=$id" $host/usertype)
  if [ $user_type == 'free' ]; then
    freeInfoMessage
  elif [ $user_type == 'unregistered' ]; then
    registerInfoMessage
  elif [ $user_type == 'unknown' ]; then
    unregisteredSignUp
  fi
else
  echoerr -e "\033[01;36m"
  echoerr "info:    "
  echoerr "info:    Installing and signing up for the first time"
  echoerr "info:    with an unregistered account"
  echoerr "info:    if you already have an account you can log in with:"
  echoerr "info:    "
  echoerr "info:    wsend --login"
  echoerr "info:    "
  echoerr "info:    your transfer will continue"
  echoerr "info:    "
  echoerr -e "\033[00m"
  unregisteredSignUp
  getAccountType
fi

RETVAL=0
loginBool="false"
registerBool="false"
referBool="false"
referLinkBool="false"
fileSendBool="false"
echoUsage="false"
deleteBool="false"
updateBool="false"
fileOrDirToSend="$1"

if [ $# == 0 ]; then
  echoUsage="true"
fi

while test -n "$1"; do
  case "$1" in
   --login|-l)
      loginBool="true"
      shift
      ;;
   --register|-r)
      registerBool="true"
      shift
      ;;
   --refer)
      referBool="true"
      friendEmail=$2
      shift
      shift
      ;;
   --refer-link)
      referLinkBool="true"
      shift
      ;;
   --rm|-x)
      deleteBool="true"
      link=$2
      shift
      shift
      ;;
   --update|-u)
      updateBool="true"
      firstArg=$2
      secondArg=$3
      shift
      shift
      shift
      ;;
	 --list)
      loginBool="false"
      referLinkBool="false"
      registerBool="false"
      referBool="false"
      fileSendBool="false"
	  list
      shift
	  ;;
    *)
      fileSendBool="true"
      shift
      ;;
  esac
done

if [ $loginBool == "true" ]; then
  login
fi

if [ $registerBool == "true" ]; then
  register
fi

if [ $referBool == "true" ]; then
  refer
fi

if [ $referLinkBool == "true" ]; then
  referLink
fi

if [ $deleteBool == "true" ]; then
  deleteFile
fi

if [ $updateBool == "true" ]; then
  updateFile
fi

if [ "$fileSendBool" == "true" ]; then
    sendFile
fi

if [ $echoUsage == "true" ]; then
  echoerr -e "\033[01;31m"
  echoerr "error:   "
  echoerr "error:   Usage: $0 [-l|--login] [-r|--register]"
  echoerr "error:   Usage: [--refer friend@example.com]"
  echoerr "error:   Usage: [--refer-link]"
  echoerr "error:   Usage: [-x|--rm] <url>"
  echoerr "error:   Usage: [-u|--update] <url> <file>"
  echoerr "error:   or send a file, example:"
  echoerr "error:   $0 file.txt"
  echoerr "error:   "
  echoerr -e "\033[00m"
fi
